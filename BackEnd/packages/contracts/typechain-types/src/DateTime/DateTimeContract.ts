/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface DateTimeContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOW_FRI"
      | "DOW_MON"
      | "DOW_SAT"
      | "DOW_SUN"
      | "DOW_THU"
      | "DOW_TUE"
      | "DOW_WED"
      | "OFFSET19700101"
      | "SECONDS_PER_DAY"
      | "SECONDS_PER_HOUR"
      | "SECONDS_PER_MINUTE"
      | "_daysFromDate"
      | "_daysToDate"
      | "_getDaysInMonth"
      | "_isLeapYear"
      | "_now"
      | "_nowDateTime"
      | "addDays"
      | "addHours"
      | "addMinutes"
      | "addMonths"
      | "addSeconds"
      | "addYears"
      | "diffDays"
      | "diffHours"
      | "diffMinutes"
      | "diffMonths"
      | "diffSeconds"
      | "diffYears"
      | "getDay"
      | "getDayOfWeek"
      | "getDaysInMonth"
      | "getHour"
      | "getMinute"
      | "getMonth"
      | "getSecond"
      | "getYear"
      | "isLeapYear"
      | "isValidDate"
      | "isValidDateTime"
      | "isWeekDay"
      | "isWeekEnd"
      | "subDays"
      | "subHours"
      | "subMinutes"
      | "subMonths"
      | "subSeconds"
      | "subYears"
      | "timestampFromDate"
      | "timestampFromDateTime"
      | "timestampToDate"
      | "timestampToDateTime"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "DOW_FRI", values?: undefined): string;
  encodeFunctionData(functionFragment: "DOW_MON", values?: undefined): string;
  encodeFunctionData(functionFragment: "DOW_SAT", values?: undefined): string;
  encodeFunctionData(functionFragment: "DOW_SUN", values?: undefined): string;
  encodeFunctionData(functionFragment: "DOW_THU", values?: undefined): string;
  encodeFunctionData(functionFragment: "DOW_TUE", values?: undefined): string;
  encodeFunctionData(functionFragment: "DOW_WED", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "OFFSET19700101",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECONDS_PER_DAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECONDS_PER_HOUR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECONDS_PER_MINUTE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_daysFromDate",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_daysToDate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getDaysInMonth",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_isLeapYear",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "_now", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_nowDateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addDays",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addHours",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addMinutes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addMonths",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addSeconds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addYears",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "diffDays",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "diffHours",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "diffMinutes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "diffMonths",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "diffSeconds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "diffYears",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDayOfWeek",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDaysInMonth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHour",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMonth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSecond",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getYear",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isLeapYear",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidDate",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidDateTime",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isWeekDay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isWeekEnd",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subDays",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subHours",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subMinutes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subMonths",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subSeconds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subYears",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timestampFromDate",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timestampFromDateTime",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "timestampToDate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timestampToDateTime",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "DOW_FRI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DOW_MON", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DOW_SAT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DOW_SUN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DOW_THU", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DOW_TUE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DOW_WED", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "OFFSET19700101",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECONDS_PER_DAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECONDS_PER_HOUR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECONDS_PER_MINUTE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_daysFromDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_daysToDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getDaysInMonth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isLeapYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_now", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_nowDateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addDays", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addHours", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addMinutes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addMonths", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addSeconds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addYears", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "diffDays", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "diffHours", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "diffMinutes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "diffMonths", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "diffSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "diffYears", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDayOfWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDaysInMonth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHour", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMinute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMonth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSecond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getYear", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isLeapYear", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidDateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isWeekDay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isWeekEnd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subDays", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subHours", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subMinutes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subMonths", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subSeconds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subYears", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timestampFromDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timestampFromDateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timestampToDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timestampToDateTime",
    data: BytesLike
  ): Result;
}

export interface DateTimeContract extends BaseContract {
  connect(runner?: ContractRunner | null): DateTimeContract;
  waitForDeployment(): Promise<this>;

  interface: DateTimeContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOW_FRI: TypedContractMethod<[], [bigint], "view">;

  DOW_MON: TypedContractMethod<[], [bigint], "view">;

  DOW_SAT: TypedContractMethod<[], [bigint], "view">;

  DOW_SUN: TypedContractMethod<[], [bigint], "view">;

  DOW_THU: TypedContractMethod<[], [bigint], "view">;

  DOW_TUE: TypedContractMethod<[], [bigint], "view">;

  DOW_WED: TypedContractMethod<[], [bigint], "view">;

  OFFSET19700101: TypedContractMethod<[], [bigint], "view">;

  SECONDS_PER_DAY: TypedContractMethod<[], [bigint], "view">;

  SECONDS_PER_HOUR: TypedContractMethod<[], [bigint], "view">;

  SECONDS_PER_MINUTE: TypedContractMethod<[], [bigint], "view">;

  _daysFromDate: TypedContractMethod<
    [year: BigNumberish, month: BigNumberish, day: BigNumberish],
    [bigint],
    "view"
  >;

  _daysToDate: TypedContractMethod<
    [_days: BigNumberish],
    [[bigint, bigint, bigint] & { year: bigint; month: bigint; day: bigint }],
    "view"
  >;

  _getDaysInMonth: TypedContractMethod<
    [year: BigNumberish, month: BigNumberish],
    [bigint],
    "view"
  >;

  _isLeapYear: TypedContractMethod<[year: BigNumberish], [boolean], "view">;

  _now: TypedContractMethod<[], [bigint], "view">;

  _nowDateTime: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        year: bigint;
        month: bigint;
        day: bigint;
        hour: bigint;
        minute: bigint;
        second: bigint;
      }
    ],
    "view"
  >;

  addDays: TypedContractMethod<
    [timestamp: BigNumberish, _days: BigNumberish],
    [bigint],
    "view"
  >;

  addHours: TypedContractMethod<
    [timestamp: BigNumberish, _hours: BigNumberish],
    [bigint],
    "view"
  >;

  addMinutes: TypedContractMethod<
    [timestamp: BigNumberish, _minutes: BigNumberish],
    [bigint],
    "view"
  >;

  addMonths: TypedContractMethod<
    [timestamp: BigNumberish, _months: BigNumberish],
    [bigint],
    "view"
  >;

  addSeconds: TypedContractMethod<
    [timestamp: BigNumberish, _seconds: BigNumberish],
    [bigint],
    "view"
  >;

  addYears: TypedContractMethod<
    [timestamp: BigNumberish, _years: BigNumberish],
    [bigint],
    "view"
  >;

  diffDays: TypedContractMethod<
    [fromTimestamp: BigNumberish, toTimestamp: BigNumberish],
    [bigint],
    "view"
  >;

  diffHours: TypedContractMethod<
    [fromTimestamp: BigNumberish, toTimestamp: BigNumberish],
    [bigint],
    "view"
  >;

  diffMinutes: TypedContractMethod<
    [fromTimestamp: BigNumberish, toTimestamp: BigNumberish],
    [bigint],
    "view"
  >;

  diffMonths: TypedContractMethod<
    [fromTimestamp: BigNumberish, toTimestamp: BigNumberish],
    [bigint],
    "view"
  >;

  diffSeconds: TypedContractMethod<
    [fromTimestamp: BigNumberish, toTimestamp: BigNumberish],
    [bigint],
    "view"
  >;

  diffYears: TypedContractMethod<
    [fromTimestamp: BigNumberish, toTimestamp: BigNumberish],
    [bigint],
    "view"
  >;

  getDay: TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;

  getDayOfWeek: TypedContractMethod<
    [timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  getDaysInMonth: TypedContractMethod<
    [timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  getHour: TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;

  getMinute: TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;

  getMonth: TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;

  getSecond: TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;

  getYear: TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;

  isLeapYear: TypedContractMethod<[timestamp: BigNumberish], [boolean], "view">;

  isValidDate: TypedContractMethod<
    [year: BigNumberish, month: BigNumberish, day: BigNumberish],
    [boolean],
    "view"
  >;

  isValidDateTime: TypedContractMethod<
    [
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      minute: BigNumberish,
      second: BigNumberish
    ],
    [boolean],
    "view"
  >;

  isWeekDay: TypedContractMethod<[timestamp: BigNumberish], [boolean], "view">;

  isWeekEnd: TypedContractMethod<[timestamp: BigNumberish], [boolean], "view">;

  subDays: TypedContractMethod<
    [timestamp: BigNumberish, _days: BigNumberish],
    [bigint],
    "view"
  >;

  subHours: TypedContractMethod<
    [timestamp: BigNumberish, _hours: BigNumberish],
    [bigint],
    "view"
  >;

  subMinutes: TypedContractMethod<
    [timestamp: BigNumberish, _minutes: BigNumberish],
    [bigint],
    "view"
  >;

  subMonths: TypedContractMethod<
    [timestamp: BigNumberish, _months: BigNumberish],
    [bigint],
    "view"
  >;

  subSeconds: TypedContractMethod<
    [timestamp: BigNumberish, _seconds: BigNumberish],
    [bigint],
    "view"
  >;

  subYears: TypedContractMethod<
    [timestamp: BigNumberish, _years: BigNumberish],
    [bigint],
    "view"
  >;

  timestampFromDate: TypedContractMethod<
    [year: BigNumberish, month: BigNumberish, day: BigNumberish],
    [bigint],
    "view"
  >;

  timestampFromDateTime: TypedContractMethod<
    [
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      minute: BigNumberish,
      second: BigNumberish
    ],
    [bigint],
    "view"
  >;

  timestampToDate: TypedContractMethod<
    [timestamp: BigNumberish],
    [[bigint, bigint, bigint] & { year: bigint; month: bigint; day: bigint }],
    "view"
  >;

  timestampToDateTime: TypedContractMethod<
    [timestamp: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        year: bigint;
        month: bigint;
        day: bigint;
        hour: bigint;
        minute: bigint;
        second: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOW_FRI"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DOW_MON"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DOW_SAT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DOW_SUN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DOW_THU"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DOW_TUE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DOW_WED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OFFSET19700101"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SECONDS_PER_DAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SECONDS_PER_HOUR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SECONDS_PER_MINUTE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_daysFromDate"
  ): TypedContractMethod<
    [year: BigNumberish, month: BigNumberish, day: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "_daysToDate"
  ): TypedContractMethod<
    [_days: BigNumberish],
    [[bigint, bigint, bigint] & { year: bigint; month: bigint; day: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "_getDaysInMonth"
  ): TypedContractMethod<
    [year: BigNumberish, month: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "_isLeapYear"
  ): TypedContractMethod<[year: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "_now"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_nowDateTime"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        year: bigint;
        month: bigint;
        day: bigint;
        hour: bigint;
        minute: bigint;
        second: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "addDays"
  ): TypedContractMethod<
    [timestamp: BigNumberish, _days: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "addHours"
  ): TypedContractMethod<
    [timestamp: BigNumberish, _hours: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "addMinutes"
  ): TypedContractMethod<
    [timestamp: BigNumberish, _minutes: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "addMonths"
  ): TypedContractMethod<
    [timestamp: BigNumberish, _months: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "addSeconds"
  ): TypedContractMethod<
    [timestamp: BigNumberish, _seconds: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "addYears"
  ): TypedContractMethod<
    [timestamp: BigNumberish, _years: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "diffDays"
  ): TypedContractMethod<
    [fromTimestamp: BigNumberish, toTimestamp: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "diffHours"
  ): TypedContractMethod<
    [fromTimestamp: BigNumberish, toTimestamp: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "diffMinutes"
  ): TypedContractMethod<
    [fromTimestamp: BigNumberish, toTimestamp: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "diffMonths"
  ): TypedContractMethod<
    [fromTimestamp: BigNumberish, toTimestamp: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "diffSeconds"
  ): TypedContractMethod<
    [fromTimestamp: BigNumberish, toTimestamp: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "diffYears"
  ): TypedContractMethod<
    [fromTimestamp: BigNumberish, toTimestamp: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDay"
  ): TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDayOfWeek"
  ): TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDaysInMonth"
  ): TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getHour"
  ): TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinute"
  ): TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMonth"
  ): TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSecond"
  ): TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getYear"
  ): TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "isLeapYear"
  ): TypedContractMethod<[timestamp: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidDate"
  ): TypedContractMethod<
    [year: BigNumberish, month: BigNumberish, day: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isValidDateTime"
  ): TypedContractMethod<
    [
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      minute: BigNumberish,
      second: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isWeekDay"
  ): TypedContractMethod<[timestamp: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWeekEnd"
  ): TypedContractMethod<[timestamp: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "subDays"
  ): TypedContractMethod<
    [timestamp: BigNumberish, _days: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "subHours"
  ): TypedContractMethod<
    [timestamp: BigNumberish, _hours: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "subMinutes"
  ): TypedContractMethod<
    [timestamp: BigNumberish, _minutes: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "subMonths"
  ): TypedContractMethod<
    [timestamp: BigNumberish, _months: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "subSeconds"
  ): TypedContractMethod<
    [timestamp: BigNumberish, _seconds: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "subYears"
  ): TypedContractMethod<
    [timestamp: BigNumberish, _years: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "timestampFromDate"
  ): TypedContractMethod<
    [year: BigNumberish, month: BigNumberish, day: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "timestampFromDateTime"
  ): TypedContractMethod<
    [
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      minute: BigNumberish,
      second: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "timestampToDate"
  ): TypedContractMethod<
    [timestamp: BigNumberish],
    [[bigint, bigint, bigint] & { year: bigint; month: bigint; day: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "timestampToDateTime"
  ): TypedContractMethod<
    [timestamp: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        year: bigint;
        month: bigint;
        day: bigint;
        hour: bigint;
        minute: bigint;
        second: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
