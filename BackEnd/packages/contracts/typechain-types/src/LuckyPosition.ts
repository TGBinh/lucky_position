/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace LuckyPosition {
  export type GameStruct = {
    ticketPrice: BigNumberish;
    totalPool: BigNumberish;
    winner: AddressLike;
    status: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
  };

  export type GameStructOutput = [
    ticketPrice: bigint,
    totalPool: bigint,
    winner: string,
    status: bigint,
    startTime: bigint,
    endTime: bigint
  ] & {
    ticketPrice: bigint;
    totalPool: bigint;
    winner: string;
    status: bigint;
    startTime: bigint;
    endTime: bigint;
  };
}

export interface LuckyPositionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "acceptOwnership"
      | "allowedToken"
      | "chainlinkSubscriptionId"
      | "checkUpkeep"
      | "claimRefund"
      | "collectedFee"
      | "createGame"
      | "dateTimeContract"
      | "duration"
      | "feePercentage"
      | "forwarderAddress"
      | "gameCounter"
      | "games"
      | "getCurrentTime"
      | "getGameDetails"
      | "getPlayers"
      | "hasClaimedRefund"
      | "hasJoined"
      | "initialize"
      | "isWithinActiveTime"
      | "joinGame"
      | "keyHash"
      | "owner"
      | "pauseGame"
      | "pauseHour"
      | "pauseMinute"
      | "pauseSecond"
      | "paused"
      | "performUpkeep"
      | "playerTickets"
      | "proxiableUUID"
      | "rawFulfillRandomWords"
      | "requestIdToGameId"
      | "requestRandomWordsFromContract"
      | "resumeGame"
      | "resumeHour"
      | "resumeMinute"
      | "resumeSecond"
      | "s_vrfCoordinator"
      | "setAllowedToken"
      | "setCoordinator"
      | "setFeePercentage"
      | "setForwarder"
      | "setGameParams"
      | "setPauseTime"
      | "setResumeTime"
      | "setVRFParameters"
      | "ticketPrice"
      | "transferOwnership"
      | "upgradeToAndCall"
      | "vrfCoordinator"
      | "withDrawFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AllowedTokenUpdated"
      | "CoordinatorSet"
      | "FeeUpdated"
      | "FeeWithdrawn"
      | "ForwarderUpdated"
      | "GameCreated"
      | "GameEnded"
      | "GameFailed"
      | "GameParamsUpdated"
      | "GamePaused"
      | "GameResumed"
      | "Initialized"
      | "OwnershipTransferRequested"
      | "OwnershipTransferred"
      | "PauseTimeUpdated"
      | "Paused"
      | "PlayerJoined"
      | "RefundClaimed"
      | "ResumeTimeUpdated"
      | "Unpaused"
      | "Upgraded"
      | "VRFParametersUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainlinkSubscriptionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRefund",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collectedFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createGame",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dateTimeContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "duration", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forwarderAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gameCounter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "games", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGameDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimedRefund",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasJoined",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, BytesLike, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWithinActiveTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "joinGame", values?: undefined): string;
  encodeFunctionData(functionFragment: "keyHash", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pauseGame", values?: undefined): string;
  encodeFunctionData(functionFragment: "pauseHour", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseMinute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseSecond",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "playerTickets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "requestIdToGameId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRandomWordsFromContract",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resumeGame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resumeHour",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resumeMinute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resumeSecond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_vrfCoordinator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCoordinator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setForwarder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGameParams",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPauseTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setResumeTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVRFParameters",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vrfCoordinator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withDrawFee",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainlinkSubscriptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dateTimeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "duration", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forwarderAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlayers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasClaimedRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasJoined", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWithinActiveTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keyHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauseGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauseHour", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseMinute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestIdToGameId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRandomWordsFromContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resumeGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resumeHour", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resumeMinute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resumeSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_vrfCoordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCoordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGameParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPauseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setResumeTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVRFParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrfCoordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withDrawFee",
    data: BytesLike
  ): Result;
}

export namespace AllowedTokenUpdatedEvent {
  export type InputTuple = [newToken: AddressLike];
  export type OutputTuple = [newToken: string];
  export interface OutputObject {
    newToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CoordinatorSetEvent {
  export type InputTuple = [vrfCoordinator: AddressLike];
  export type OutputTuple = [vrfCoordinator: string];
  export interface OutputObject {
    vrfCoordinator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeUpdatedEvent {
  export type InputTuple = [newFeePercentage: BigNumberish];
  export type OutputTuple = [newFeePercentage: bigint];
  export interface OutputObject {
    newFeePercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeWithdrawnEvent {
  export type InputTuple = [admin: AddressLike, amount: BigNumberish];
  export type OutputTuple = [admin: string, amount: bigint];
  export interface OutputObject {
    admin: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ForwarderUpdatedEvent {
  export type InputTuple = [newForwarder: AddressLike];
  export type OutputTuple = [newForwarder: string];
  export interface OutputObject {
    newForwarder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameCreatedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    ticketPrice: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    gameId: bigint,
    ticketPrice: bigint,
    startTime: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    gameId: bigint;
    ticketPrice: bigint;
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameEndedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    winner: AddressLike,
    totalReward: BigNumberish
  ];
  export type OutputTuple = [
    gameId: bigint,
    winner: string,
    totalReward: bigint
  ];
  export interface OutputObject {
    gameId: bigint;
    winner: string;
    totalReward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameFailedEvent {
  export type InputTuple = [gameId: BigNumberish];
  export type OutputTuple = [gameId: bigint];
  export interface OutputObject {
    gameId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameParamsUpdatedEvent {
  export type InputTuple = [ticketPrice: BigNumberish, duration: BigNumberish];
  export type OutputTuple = [ticketPrice: bigint, duration: bigint];
  export interface OutputObject {
    ticketPrice: bigint;
    duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GamePausedEvent {
  export type InputTuple = [gameId: BigNumberish, pausedAt: BigNumberish];
  export type OutputTuple = [gameId: bigint, pausedAt: bigint];
  export interface OutputObject {
    gameId: bigint;
    pausedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameResumedEvent {
  export type InputTuple = [gameId: BigNumberish, resumedAt: BigNumberish];
  export type OutputTuple = [gameId: bigint, resumedAt: bigint];
  export interface OutputObject {
    gameId: bigint;
    resumedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferRequestedEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauseTimeUpdatedEvent {
  export type InputTuple = [
    hour: BigNumberish,
    minute: BigNumberish,
    second: BigNumberish
  ];
  export type OutputTuple = [hour: bigint, minute: bigint, second: bigint];
  export interface OutputObject {
    hour: bigint;
    minute: bigint;
    second: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerJoinedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    playerId: BigNumberish,
    player: AddressLike,
    joinedAt: BigNumberish
  ];
  export type OutputTuple = [
    gameId: bigint,
    playerId: bigint,
    player: string,
    joinedAt: bigint
  ];
  export interface OutputObject {
    gameId: bigint;
    playerId: bigint;
    player: string;
    joinedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundClaimedEvent {
  export type InputTuple = [
    player: AddressLike,
    amount: BigNumberish,
    gameId: BigNumberish[],
    refundedAt: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    amount: bigint,
    gameId: bigint[],
    refundedAt: bigint
  ];
  export interface OutputObject {
    player: string;
    amount: bigint;
    gameId: bigint[];
    refundedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResumeTimeUpdatedEvent {
  export type InputTuple = [
    hour: BigNumberish,
    minute: BigNumberish,
    second: BigNumberish
  ];
  export type OutputTuple = [hour: bigint, minute: bigint, second: bigint];
  export interface OutputObject {
    hour: bigint;
    minute: bigint;
    second: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VRFParametersUpdatedEvent {
  export type InputTuple = [
    subscriptionId: BigNumberish,
    vrfCoordinator: AddressLike,
    keyHash: BytesLike
  ];
  export type OutputTuple = [
    subscriptionId: bigint,
    vrfCoordinator: string,
    keyHash: string
  ];
  export interface OutputObject {
    subscriptionId: bigint;
    vrfCoordinator: string;
    keyHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LuckyPosition extends BaseContract {
  connect(runner?: ContractRunner | null): LuckyPosition;
  waitForDeployment(): Promise<this>;

  interface: LuckyPositionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  allowedToken: TypedContractMethod<[], [string], "view">;

  chainlinkSubscriptionId: TypedContractMethod<[], [bigint], "view">;

  checkUpkeep: TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean; performData: string }],
    "view"
  >;

  claimRefund: TypedContractMethod<
    [_gameIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  collectedFee: TypedContractMethod<[], [bigint], "view">;

  createGame: TypedContractMethod<
    [_ticketPrice: BigNumberish, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  dateTimeContract: TypedContractMethod<[], [string], "view">;

  duration: TypedContractMethod<[], [bigint], "view">;

  feePercentage: TypedContractMethod<[], [bigint], "view">;

  forwarderAddress: TypedContractMethod<[], [string], "view">;

  gameCounter: TypedContractMethod<[], [bigint], "view">;

  games: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint, bigint] & {
        ticketPrice: bigint;
        totalPool: bigint;
        winner: string;
        status: bigint;
        startTime: bigint;
        endTime: bigint;
      }
    ],
    "view"
  >;

  getCurrentTime: TypedContractMethod<[], [[bigint, bigint, bigint]], "view">;

  getGameDetails: TypedContractMethod<
    [_gameId: BigNumberish],
    [LuckyPosition.GameStructOutput],
    "view"
  >;

  getPlayers: TypedContractMethod<[], [string[]], "view">;

  hasClaimedRefund: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  hasJoined: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _vrfCoordinator: AddressLike,
      _keyHash: BytesLike,
      _subscriptionId: BigNumberish,
      _allowedToken: AddressLike,
      _dateTimeContract: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  isWithinActiveTime: TypedContractMethod<[], [boolean], "view">;

  joinGame: TypedContractMethod<[], [void], "nonpayable">;

  keyHash: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pauseGame: TypedContractMethod<[], [void], "nonpayable">;

  pauseHour: TypedContractMethod<[], [bigint], "view">;

  pauseMinute: TypedContractMethod<[], [bigint], "view">;

  pauseSecond: TypedContractMethod<[], [bigint], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  performUpkeep: TypedContractMethod<
    [performData: BytesLike],
    [void],
    "nonpayable"
  >;

  playerTickets: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  rawFulfillRandomWords: TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  requestIdToGameId: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  requestRandomWordsFromContract: TypedContractMethod<
    [
      _keyHash: BytesLike,
      _chainlinkSubscriptionId: BigNumberish,
      _requestConfirmations: BigNumberish,
      _callbackGasLimit: BigNumberish,
      _numWords: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  resumeGame: TypedContractMethod<[], [void], "nonpayable">;

  resumeHour: TypedContractMethod<[], [bigint], "view">;

  resumeMinute: TypedContractMethod<[], [bigint], "view">;

  resumeSecond: TypedContractMethod<[], [bigint], "view">;

  s_vrfCoordinator: TypedContractMethod<[], [string], "view">;

  setAllowedToken: TypedContractMethod<
    [_token: AddressLike],
    [void],
    "nonpayable"
  >;

  setCoordinator: TypedContractMethod<
    [_vrfCoordinator: AddressLike],
    [void],
    "nonpayable"
  >;

  setFeePercentage: TypedContractMethod<
    [_feePercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setForwarder: TypedContractMethod<
    [_forwarderAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setGameParams: TypedContractMethod<
    [_ticketPrice: BigNumberish, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPauseTime: TypedContractMethod<
    [timestamp: BigNumberish],
    [void],
    "nonpayable"
  >;

  setResumeTime: TypedContractMethod<
    [timestamp: BigNumberish],
    [void],
    "nonpayable"
  >;

  setVRFParameters: TypedContractMethod<
    [
      _subscriptionId: BigNumberish,
      _vrfCoordinator: AddressLike,
      _keyHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  ticketPrice: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  vrfCoordinator: TypedContractMethod<[], [string], "view">;

  withDrawFee: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowedToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "chainlinkSubscriptionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "checkUpkeep"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean; performData: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimRefund"
  ): TypedContractMethod<[_gameIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collectedFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createGame"
  ): TypedContractMethod<
    [_ticketPrice: BigNumberish, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dateTimeContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "duration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "forwarderAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gameCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "games"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint, bigint] & {
        ticketPrice: bigint;
        totalPool: bigint;
        winner: string;
        status: bigint;
        startTime: bigint;
        endTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentTime"
  ): TypedContractMethod<[], [[bigint, bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "getGameDetails"
  ): TypedContractMethod<
    [_gameId: BigNumberish],
    [LuckyPosition.GameStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "hasClaimedRefund"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasJoined"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _vrfCoordinator: AddressLike,
      _keyHash: BytesLike,
      _subscriptionId: BigNumberish,
      _allowedToken: AddressLike,
      _dateTimeContract: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isWithinActiveTime"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "joinGame"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "keyHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pauseGame"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pauseHour"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pauseMinute"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pauseSecond"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "performUpkeep"
  ): TypedContractMethod<[performData: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "playerTickets"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rawFulfillRandomWords"
  ): TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestIdToGameId"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestRandomWordsFromContract"
  ): TypedContractMethod<
    [
      _keyHash: BytesLike,
      _chainlinkSubscriptionId: BigNumberish,
      _requestConfirmations: BigNumberish,
      _callbackGasLimit: BigNumberish,
      _numWords: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resumeGame"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resumeHour"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "resumeMinute"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "resumeSecond"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "s_vrfCoordinator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAllowedToken"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCoordinator"
  ): TypedContractMethod<[_vrfCoordinator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeePercentage"
  ): TypedContractMethod<[_feePercentage: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setForwarder"
  ): TypedContractMethod<
    [_forwarderAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGameParams"
  ): TypedContractMethod<
    [_ticketPrice: BigNumberish, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPauseTime"
  ): TypedContractMethod<[timestamp: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setResumeTime"
  ): TypedContractMethod<[timestamp: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVRFParameters"
  ): TypedContractMethod<
    [
      _subscriptionId: BigNumberish,
      _vrfCoordinator: AddressLike,
      _keyHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ticketPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "vrfCoordinator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withDrawFee"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AllowedTokenUpdated"
  ): TypedContractEvent<
    AllowedTokenUpdatedEvent.InputTuple,
    AllowedTokenUpdatedEvent.OutputTuple,
    AllowedTokenUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CoordinatorSet"
  ): TypedContractEvent<
    CoordinatorSetEvent.InputTuple,
    CoordinatorSetEvent.OutputTuple,
    CoordinatorSetEvent.OutputObject
  >;
  getEvent(
    key: "FeeUpdated"
  ): TypedContractEvent<
    FeeUpdatedEvent.InputTuple,
    FeeUpdatedEvent.OutputTuple,
    FeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeeWithdrawn"
  ): TypedContractEvent<
    FeeWithdrawnEvent.InputTuple,
    FeeWithdrawnEvent.OutputTuple,
    FeeWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "ForwarderUpdated"
  ): TypedContractEvent<
    ForwarderUpdatedEvent.InputTuple,
    ForwarderUpdatedEvent.OutputTuple,
    ForwarderUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "GameCreated"
  ): TypedContractEvent<
    GameCreatedEvent.InputTuple,
    GameCreatedEvent.OutputTuple,
    GameCreatedEvent.OutputObject
  >;
  getEvent(
    key: "GameEnded"
  ): TypedContractEvent<
    GameEndedEvent.InputTuple,
    GameEndedEvent.OutputTuple,
    GameEndedEvent.OutputObject
  >;
  getEvent(
    key: "GameFailed"
  ): TypedContractEvent<
    GameFailedEvent.InputTuple,
    GameFailedEvent.OutputTuple,
    GameFailedEvent.OutputObject
  >;
  getEvent(
    key: "GameParamsUpdated"
  ): TypedContractEvent<
    GameParamsUpdatedEvent.InputTuple,
    GameParamsUpdatedEvent.OutputTuple,
    GameParamsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "GamePaused"
  ): TypedContractEvent<
    GamePausedEvent.InputTuple,
    GamePausedEvent.OutputTuple,
    GamePausedEvent.OutputObject
  >;
  getEvent(
    key: "GameResumed"
  ): TypedContractEvent<
    GameResumedEvent.InputTuple,
    GameResumedEvent.OutputTuple,
    GameResumedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferRequested"
  ): TypedContractEvent<
    OwnershipTransferRequestedEvent.InputTuple,
    OwnershipTransferRequestedEvent.OutputTuple,
    OwnershipTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PauseTimeUpdated"
  ): TypedContractEvent<
    PauseTimeUpdatedEvent.InputTuple,
    PauseTimeUpdatedEvent.OutputTuple,
    PauseTimeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerJoined"
  ): TypedContractEvent<
    PlayerJoinedEvent.InputTuple,
    PlayerJoinedEvent.OutputTuple,
    PlayerJoinedEvent.OutputObject
  >;
  getEvent(
    key: "RefundClaimed"
  ): TypedContractEvent<
    RefundClaimedEvent.InputTuple,
    RefundClaimedEvent.OutputTuple,
    RefundClaimedEvent.OutputObject
  >;
  getEvent(
    key: "ResumeTimeUpdated"
  ): TypedContractEvent<
    ResumeTimeUpdatedEvent.InputTuple,
    ResumeTimeUpdatedEvent.OutputTuple,
    ResumeTimeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "VRFParametersUpdated"
  ): TypedContractEvent<
    VRFParametersUpdatedEvent.InputTuple,
    VRFParametersUpdatedEvent.OutputTuple,
    VRFParametersUpdatedEvent.OutputObject
  >;

  filters: {
    "AllowedTokenUpdated(address)": TypedContractEvent<
      AllowedTokenUpdatedEvent.InputTuple,
      AllowedTokenUpdatedEvent.OutputTuple,
      AllowedTokenUpdatedEvent.OutputObject
    >;
    AllowedTokenUpdated: TypedContractEvent<
      AllowedTokenUpdatedEvent.InputTuple,
      AllowedTokenUpdatedEvent.OutputTuple,
      AllowedTokenUpdatedEvent.OutputObject
    >;

    "CoordinatorSet(address)": TypedContractEvent<
      CoordinatorSetEvent.InputTuple,
      CoordinatorSetEvent.OutputTuple,
      CoordinatorSetEvent.OutputObject
    >;
    CoordinatorSet: TypedContractEvent<
      CoordinatorSetEvent.InputTuple,
      CoordinatorSetEvent.OutputTuple,
      CoordinatorSetEvent.OutputObject
    >;

    "FeeUpdated(uint256)": TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;
    FeeUpdated: TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;

    "FeeWithdrawn(address,uint256)": TypedContractEvent<
      FeeWithdrawnEvent.InputTuple,
      FeeWithdrawnEvent.OutputTuple,
      FeeWithdrawnEvent.OutputObject
    >;
    FeeWithdrawn: TypedContractEvent<
      FeeWithdrawnEvent.InputTuple,
      FeeWithdrawnEvent.OutputTuple,
      FeeWithdrawnEvent.OutputObject
    >;

    "ForwarderUpdated(address)": TypedContractEvent<
      ForwarderUpdatedEvent.InputTuple,
      ForwarderUpdatedEvent.OutputTuple,
      ForwarderUpdatedEvent.OutputObject
    >;
    ForwarderUpdated: TypedContractEvent<
      ForwarderUpdatedEvent.InputTuple,
      ForwarderUpdatedEvent.OutputTuple,
      ForwarderUpdatedEvent.OutputObject
    >;

    "GameCreated(uint256,uint256,uint256,uint256)": TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;
    GameCreated: TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;

    "GameEnded(uint256,address,uint256)": TypedContractEvent<
      GameEndedEvent.InputTuple,
      GameEndedEvent.OutputTuple,
      GameEndedEvent.OutputObject
    >;
    GameEnded: TypedContractEvent<
      GameEndedEvent.InputTuple,
      GameEndedEvent.OutputTuple,
      GameEndedEvent.OutputObject
    >;

    "GameFailed(uint256)": TypedContractEvent<
      GameFailedEvent.InputTuple,
      GameFailedEvent.OutputTuple,
      GameFailedEvent.OutputObject
    >;
    GameFailed: TypedContractEvent<
      GameFailedEvent.InputTuple,
      GameFailedEvent.OutputTuple,
      GameFailedEvent.OutputObject
    >;

    "GameParamsUpdated(uint256,uint128)": TypedContractEvent<
      GameParamsUpdatedEvent.InputTuple,
      GameParamsUpdatedEvent.OutputTuple,
      GameParamsUpdatedEvent.OutputObject
    >;
    GameParamsUpdated: TypedContractEvent<
      GameParamsUpdatedEvent.InputTuple,
      GameParamsUpdatedEvent.OutputTuple,
      GameParamsUpdatedEvent.OutputObject
    >;

    "GamePaused(uint256,uint256)": TypedContractEvent<
      GamePausedEvent.InputTuple,
      GamePausedEvent.OutputTuple,
      GamePausedEvent.OutputObject
    >;
    GamePaused: TypedContractEvent<
      GamePausedEvent.InputTuple,
      GamePausedEvent.OutputTuple,
      GamePausedEvent.OutputObject
    >;

    "GameResumed(uint256,uint256)": TypedContractEvent<
      GameResumedEvent.InputTuple,
      GameResumedEvent.OutputTuple,
      GameResumedEvent.OutputObject
    >;
    GameResumed: TypedContractEvent<
      GameResumedEvent.InputTuple,
      GameResumedEvent.OutputTuple,
      GameResumedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferRequested(address,address)": TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;
    OwnershipTransferRequested: TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PauseTimeUpdated(uint256,uint256,uint256)": TypedContractEvent<
      PauseTimeUpdatedEvent.InputTuple,
      PauseTimeUpdatedEvent.OutputTuple,
      PauseTimeUpdatedEvent.OutputObject
    >;
    PauseTimeUpdated: TypedContractEvent<
      PauseTimeUpdatedEvent.InputTuple,
      PauseTimeUpdatedEvent.OutputTuple,
      PauseTimeUpdatedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PlayerJoined(uint256,uint256,address,uint256)": TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;
    PlayerJoined: TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;

    "RefundClaimed(address,uint256,uint256[],uint256)": TypedContractEvent<
      RefundClaimedEvent.InputTuple,
      RefundClaimedEvent.OutputTuple,
      RefundClaimedEvent.OutputObject
    >;
    RefundClaimed: TypedContractEvent<
      RefundClaimedEvent.InputTuple,
      RefundClaimedEvent.OutputTuple,
      RefundClaimedEvent.OutputObject
    >;

    "ResumeTimeUpdated(uint256,uint256,uint256)": TypedContractEvent<
      ResumeTimeUpdatedEvent.InputTuple,
      ResumeTimeUpdatedEvent.OutputTuple,
      ResumeTimeUpdatedEvent.OutputObject
    >;
    ResumeTimeUpdated: TypedContractEvent<
      ResumeTimeUpdatedEvent.InputTuple,
      ResumeTimeUpdatedEvent.OutputTuple,
      ResumeTimeUpdatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "VRFParametersUpdated(uint256,address,bytes32)": TypedContractEvent<
      VRFParametersUpdatedEvent.InputTuple,
      VRFParametersUpdatedEvent.OutputTuple,
      VRFParametersUpdatedEvent.OutputObject
    >;
    VRFParametersUpdated: TypedContractEvent<
      VRFParametersUpdatedEvent.InputTuple,
      VRFParametersUpdatedEvent.OutputTuple,
      VRFParametersUpdatedEvent.OutputObject
    >;
  };
}
