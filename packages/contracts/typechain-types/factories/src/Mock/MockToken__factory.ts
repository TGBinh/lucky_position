/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockToken,
  MockTokenInterface,
} from "../../../src/Mock/MockToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "initialOwner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_shouldFail",
        type: "bool",
      },
    ],
    name: "setTransferShouldFail",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "transferShouldFail",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001ab838038062001ab88339818101604052810190620000379190620002a7565b806040518060400160405280600981526020017f4d6f636b546f6b656e00000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f4d544b00000000000000000000000000000000000000000000000000000000008152508160039081620000b5919062000553565b508060049081620000c7919062000553565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200013f5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016200013691906200064b565b60405180910390fd5b62000150816200017460201b60201c565b506200016d6795ad4d4e852a5f0260c01b6200023a60201b60201c565b5062000668565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200026f8262000242565b9050919050565b620002818162000262565b81146200028d57600080fd5b50565b600081519050620002a18162000276565b92915050565b600060208284031215620002c057620002bf6200023d565b5b6000620002d08482850162000290565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200035b57607f821691505b60208210810362000371576200037062000313565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003db7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200039c565b620003e786836200039c565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004346200042e6200042884620003ff565b62000409565b620003ff565b9050919050565b6000819050919050565b620004508362000413565b620004686200045f826200043b565b848454620003a9565b825550505050565b600090565b6200047f62000470565b6200048c81848462000445565b505050565b5b81811015620004b457620004a860008262000475565b60018101905062000492565b5050565b601f8211156200050357620004cd8162000377565b620004d8846200038c565b81016020851015620004e8578190505b62000500620004f7856200038c565b83018262000491565b50505b505050565b600082821c905092915050565b6000620005286000198460080262000508565b1980831691505092915050565b600062000543838362000515565b9150826002028217905092915050565b6200055e82620002d9565b67ffffffffffffffff8111156200057a5762000579620002e4565b5b62000586825462000342565b62000593828285620004b8565b600060209050601f831160018114620005cb5760008415620005b6578287015190505b620005c2858262000535565b86555062000632565b601f198416620005db8662000377565b60005b828110156200060557848901518255600182019150602085019450602081019050620005de565b8683101562000625578489015162000621601f89168262000515565b8355505b6001600288020188555050505b505050505050565b620006458162000262565b82525050565b60006020820190506200066260008301846200063a565b92915050565b61144080620006786000396000f3fe608060405234801561001057600080fd5b50600436106100c55760003560e01c806306fdde03146100ca578063095ea7b3146100e85780630cf96c3b1461011857806318160ddd1461013457806323b872dd14610152578063313ce5671461018257806340c10f19146101a057806370a08231146101bc578063715018a6146101ec5780638da5cb5b146101f657806395d89b4114610214578063a9059cbb14610232578063dd62ed3e14610262578063f2fde38b14610292578063ff0a8570146102ae575b600080fd5b6100d26102cc565b6040516100df9190610fcf565b60405180910390f35b61010260048036038101906100fd919061108a565b61035e565b60405161010f91906110e5565b60405180910390f35b610132600480360381019061012d919061112c565b610381565b005b61013c6103c6565b6040516101499190611168565b60405180910390f35b61016c60048036038101906101679190611183565b6103d0565b60405161017991906110e5565b60405180910390f35b61018a6104c2565b60405161019791906111f2565b60405180910390f35b6101ba60048036038101906101b5919061108a565b6104cb565b005b6101d660048036038101906101d1919061120d565b610545565b6040516101e39190611168565b60405180910390f35b6101f461058d565b005b6101fe6105a1565b60405161020b9190611249565b60405180910390f35b61021c6105cb565b6040516102299190610fcf565b60405180910390f35b61024c6004803603810190610247919061108a565b61065d565b60405161025991906110e5565b60405180910390f35b61027c60048036038101906102779190611264565b610680565b6040516102899190611168565b60405180910390f35b6102ac60048036038101906102a7919061120d565b610707565b005b6102b661078d565b6040516102c391906110e5565b60405180910390f35b6060600380546102db906112d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610307906112d3565b80156103545780601f1061032957610100808354040283529160200191610354565b820191906000526020600020905b81548152906001019060200180831161033757829003601f168201915b5050505050905090565b6000806103696107a0565b90506103768185856107a8565b600191505092915050565b610395676e9e6e0e107560e460c01b6107ba565b6103a9671e63970981009dd860c01b6107ba565b80600560146101000a81548160ff02191690831515021790555050565b6000600254905090565b60006103e6676404c9a6a2766f2360c01b6107ba565b6103fa679f53b7f5ef640eac60c01b6107ba565b61040e6793276c3113f0c2e060c01b6107ba565b6104226774c584d087772a5f60c01b6107ba565b600560149054906101000a900460ff1615610472576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046990611350565b60405180910390fd5b6104866751e9056b58080c7460c01b6107ba565b61049a6719f395ee7e77a9f360c01b6107ba565b6104ae67fce0ee2efa7b9f8460c01b6107ba565b6104b98484846107bd565b90509392505050565b60006012905090565b6104df674b0a96558c34596a60c01b6107ba565b6104e76107ec565b6104fb67e5350238b0a4601a60c01b6107ba565b61050f67e673f9ead19339dd60c01b6107ba565b610523670f7e2f553cc0cd0860c01b6107ba565b610537674898258c1058944660c01b6107ba565b6105418282610873565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6105956107ec565b61059f60006108f5565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600480546105da906112d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610606906112d3565b80156106535780601f1061062857610100808354040283529160200191610653565b820191906000526020600020905b81548152906001019060200180831161063657829003601f168201915b5050505050905090565b6000806106686107a0565b90506106758185856109bb565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61070f6107ec565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107815760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016107789190611249565b60405180910390fd5b61078a816108f5565b50565b600560149054906101000a900460ff1681565b600033905090565b6107b58383836001610aaf565b505050565b50565b6000806107c86107a0565b90506107d5858285610c86565b6107e08585856109bb565b60019150509392505050565b6107f46107a0565b73ffffffffffffffffffffffffffffffffffffffff166108126105a1565b73ffffffffffffffffffffffffffffffffffffffff1614610871576108356107a0565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016108689190611249565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108e55760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016108dc9190611249565b60405180910390fd5b6108f160008383610d1a565b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a2d5760006040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610a249190611249565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a9f5760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610a969190611249565b60405180910390fd5b610aaa838383610d1a565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610b215760006040517fe602df05000000000000000000000000000000000000000000000000000000008152600401610b189190611249565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610b935760006040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610b8a9190611249565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015610c80578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610c779190611168565b60405180910390a35b50505050565b6000610c928484610680565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610d145781811015610d04578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610cfb93929190611370565b60405180910390fd5b610d1384848484036000610aaf565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610d6c578060026000828254610d6091906113d6565b92505081905550610e3f565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610df8578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610def93929190611370565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e885780600260008282540392505081905550610ed5565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610f329190611168565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f79578082015181840152602081019050610f5e565b60008484015250505050565b6000601f19601f8301169050919050565b6000610fa182610f3f565b610fab8185610f4a565b9350610fbb818560208601610f5b565b610fc481610f85565b840191505092915050565b60006020820190508181036000830152610fe98184610f96565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061102182610ff6565b9050919050565b61103181611016565b811461103c57600080fd5b50565b60008135905061104e81611028565b92915050565b6000819050919050565b61106781611054565b811461107257600080fd5b50565b6000813590506110848161105e565b92915050565b600080604083850312156110a1576110a0610ff1565b5b60006110af8582860161103f565b92505060206110c085828601611075565b9150509250929050565b60008115159050919050565b6110df816110ca565b82525050565b60006020820190506110fa60008301846110d6565b92915050565b611109816110ca565b811461111457600080fd5b50565b60008135905061112681611100565b92915050565b60006020828403121561114257611141610ff1565b5b600061115084828501611117565b91505092915050565b61116281611054565b82525050565b600060208201905061117d6000830184611159565b92915050565b60008060006060848603121561119c5761119b610ff1565b5b60006111aa8682870161103f565b93505060206111bb8682870161103f565b92505060406111cc86828701611075565b9150509250925092565b600060ff82169050919050565b6111ec816111d6565b82525050565b600060208201905061120760008301846111e3565b92915050565b60006020828403121561122357611222610ff1565b5b60006112318482850161103f565b91505092915050565b61124381611016565b82525050565b600060208201905061125e600083018461123a565b92915050565b6000806040838503121561127b5761127a610ff1565b5b60006112898582860161103f565b925050602061129a8582860161103f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806112eb57607f821691505b6020821081036112fe576112fd6112a4565b5b50919050565b7f546f6b656e207472616e73666572206661696c65640000000000000000000000600082015250565b600061133a601583610f4a565b915061134582611304565b602082019050919050565b600060208201905081810360008301526113698161132d565b9050919050565b6000606082019050611385600083018661123a565b6113926020830185611159565b61139f6040830184611159565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113e182611054565b91506113ec83611054565b9250828201905080821115611404576114036113a7565b5b9291505056fea2646970667358221220912e1bf475e502d54f8ec053c9458d6411a104b6a812b7d60fc15348cfcc778964736f6c63430008180033";

type MockTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockToken__factory extends ContractFactory {
  constructor(...args: MockTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    initialOwner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(initialOwner, overrides || {});
  }
  override deploy(
    initialOwner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(initialOwner, overrides || {}) as Promise<
      MockToken & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockToken__factory {
    return super.connect(runner) as MockToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockTokenInterface {
    return new Interface(_abi) as MockTokenInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockToken {
    return new Contract(address, _abi, runner) as unknown as MockToken;
  }
}
