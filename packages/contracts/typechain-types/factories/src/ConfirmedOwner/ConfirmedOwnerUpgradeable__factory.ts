/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ConfirmedOwnerUpgradeable,
  ConfirmedOwnerUpgradeableInterface,
} from "../../../src/ConfirmedOwner/ConfirmedOwnerUpgradeable";

const _abi = [
  {
    inputs: [],
    name: "InvalidInitialization",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitializing",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "version",
        type: "uint64",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "OwnershipTransferRequested",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061092f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806379ba5097146100465780638da5cb5b14610050578063f2fde38b1461006e575b600080fd5b61004e61008a565b005b6100586102fb565b604051610065919061072b565b60405180910390f35b61008860048036038101906100839190610777565b61035f565b005b61009e675b088c04db5b5ac160c01b610427565b6100b26767a9306793d912e960c01b610427565b6100c667791591d43e45d3e460c01b610427565b6100da67f88a702353cdc7a960c01b610427565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461016a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016190610801565b60405180910390fd5b61017e6750c51a7f18cd97ec60c01b610427565b610192676e51e2c257f01a9460c01b610427565b6101a6678511f934fc46936460c01b610427565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506101e0672800e9f43d46a71060c01b610427565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610234670c03f23e4f72d9e960c01b610427565b6000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061028a67178621ce1041a3f960c01b610427565b61029e670ecb4f7599cb532260c01b610427565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b600061031167b9726d942698e92060c01b610427565b61032567b34cb4f62ed0a1d160c01b610427565b61033967a99f7827ceec21ab60c01b610427565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6103736777cb2a0985e47a5e60c01b610427565b610387675db02673cabcc4ae60c01b610427565b61039b6754bca20f1fad8f6d60c01b610427565b6103af674835e8d897fd395860c01b610427565b6103b761042a565b6103cb674693ef13c403dd2c60c01b610427565b6103df67223f29aea875aa1460c01b610427565b6103f367fd2852cf27a2c6f960c01b610427565b61040767c8626312167056a960c01b610427565b61041b67d94bd867c3dc03c660c01b610427565b6104248161051e565b50565b50565b61043e67b8ef9d3c7e64e10e60c01b610427565b6104526718cc856f385f936560c01b610427565b6104666714165542632b638460c01b610427565b61047a6751a3acf1ed43f7b160c01b610427565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610508576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ff9061086d565b60405180910390fd5b61051c679b6ec011a14b120f60c01b610427565b565b610532672024cf8808d5775060c01b610427565b610546673faf1a2ee7aa9cd560c01b610427565b61055a6751f41d3326a505b760c01b610427565b61056e67e57617e16816bac460c01b610427565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d3906108d9565b60405180910390fd5b6105f067c1942c312eb3de4460c01b610427565b61060467ac4c8e922444ba0860c01b610427565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061065967899ddba14f14126560c01b610427565b61066d670b3218e093b045f760c01b610427565b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610715826106ea565b9050919050565b6107258161070a565b82525050565b6000602082019050610740600083018461071c565b92915050565b600080fd5b6107548161070a565b811461075f57600080fd5b50565b6000813590506107718161074b565b92915050565b60006020828403121561078d5761078c610746565b5b600061079b84828501610762565b91505092915050565b600082825260208201905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b60006107eb6016836107a4565b91506107f6826107b5565b602082019050919050565b6000602082019050818103600083015261081a816107de565b9050919050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b60006108576016836107a4565b915061086282610821565b602082019050919050565b600060208201905081810360008301526108868161084a565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006108c36017836107a4565b91506108ce8261088d565b602082019050919050565b600060208201905081810360008301526108f2816108b6565b905091905056fea2646970667358221220e9a024e400949e91ce1f2d95b02192e75e350790af85e03fec875ee6263f97a364736f6c63430008180033";

type ConfirmedOwnerUpgradeableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConfirmedOwnerUpgradeableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConfirmedOwnerUpgradeable__factory extends ContractFactory {
  constructor(...args: ConfirmedOwnerUpgradeableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ConfirmedOwnerUpgradeable & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): ConfirmedOwnerUpgradeable__factory {
    return super.connect(runner) as ConfirmedOwnerUpgradeable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConfirmedOwnerUpgradeableInterface {
    return new Interface(_abi) as ConfirmedOwnerUpgradeableInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ConfirmedOwnerUpgradeable {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ConfirmedOwnerUpgradeable;
  }
}
